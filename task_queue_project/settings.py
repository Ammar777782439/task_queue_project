"""
Django settings for task_queue_project project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-fy)j+vm6_2p1#410^8uohwv#y4w$3kr=l7o)gfd@(84&&simea"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'jobs',
    'django_celery_beat',


]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "task_queue_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "task_queue_project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'task_queue_dbb',
        'USER': 'postgres',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# --- إعدادات Celery ---

# عنوان الوسيط (Broker) اللي بيستخدمه Celery عشان يستقبل ويرسل المهام
# هنا بنستخدم Redis اللي شغال على نفس الجهاز (localhost) على البورت 16379 وقاعدة البيانات رقم 0
CELERY_BROKER_URL = 'redis://localhost:16379/0' # تأكد إن Redis شغال على هذا البورت

# أنواع المحتوى اللي يقبلها Celery (بنستخدم JSON)
CELERY_ACCEPT_CONTENT = ['json']

# الصيغة اللي بيستخدمها Celery لتحويل بيانات المهام قبل إرسالها (بنستخدم JSON)
CELERY_TASK_SERIALIZER = 'json'

# عنوان الباكند (Backend) اللي بيستخدمه Celery عشان يخزن نتائج المهام (لو حبينا نعرف نتيجة مهمة معينة)
# هنا بنستخدم نفس الـ Redis اللي استخدمناه للوسيط
CELERY_RESULT_BACKEND = 'redis://localhost:16379/0'

# اسم الطابور (Queue) الافتراضي اللي بتروح له المهام لو ما حددنا طابور ثاني
CELERY_TASK_DEFAULT_QUEUE = 'default'

# --- إعدادات التحكم في التزامن (Concurrency) للعمال (Workers) ---

# كم مهمة يقدر العامل (worker) الواحد ينفذها بنفس الوقت (تزامنيًا)
# هنا حددنا 4 مهام بالضبط
CELERY_WORKER_CONCURRENCY = 4

# كم مهمة إضافية يسحبها العامل مقدماً ويخليها جاهزة عنده (prefetch)
# لما نخليه 1، العامل ما يسحب مهمة جديدة إلا لما يخلص اللي في يده أو يكون فاضي
# هذا مفيد عشان نضمن توزيع المهام بشكل أفضل لو عندنا أكثر من عامل
CELERY_WORKER_PREFETCH_MULTIPLIER = 1

# متى العامل يرسل تأكيد (acknowledgment) للوسيط إنه استلم المهمة؟
# لما تكون True، العامل ما يرسل التأكيد إلا بعد ما ينفذ المهمة بنجاح (أو تفشل نهائياً)
# هذا يضمن إنه لو العامل مات فجأة وسط تنفيذ مهمة، المهمة هذي ما تضيع وترجع للطابور عشان عامل ثاني ينفذها
# لو كانت False (الافتراضي)، العامل يرسل التأكيد أول ما يستلم المهمة، فلو مات وسط التنفيذ، المهمة بتضيع
CELERY_TASK_ACKS_LATE = True

# --- إعدادات Celery إضافية ---

# هل Celery ينشئ الطوابير تلقائياً لو ما كانت موجودة؟ (نعم)
CELERY_TASK_CREATE_MISSING_QUEUES = True


# --- إعدادات الإيميل لإشعارات الفشل ---

# الباكند اللي بيستخدمه جانغو لإرسال الإيميلات
# هنا بنستخدم console.EmailBackend، وهذا بيطبع الإيميلات في الكونسول بدل ما يرسلها فعلاً (مناسب للتطوير)
# في البيئة الحقيقية، لازم نغيره لإعدادات سيرفر SMTP حقيقي

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # استبدل هذا بخادم SMTP الخاص بك
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'ammarragha@gmail.com'
EMAIL_HOST_PASSWORD = 'dbhv ajjh lphb gcrh'
DEFAULT_FROM_EMAIL = 'نظام تنفيذ المهام <ammarragha@gmail.com>'

# قائمة بإيميلات المدراء اللي بنرسل لهم إشعارات لما مهمة تفشل فشل نهائي
# حط إيميلك هنا عشان توصلك الإشعارات
ADMIN_EMAILS = ['nnohh4495@gmail.com']
